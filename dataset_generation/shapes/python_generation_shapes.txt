import bpy
import os
import math
import json

# Function to create a new collection in the Blender scene
def create_collection(collection_name):
    new_collection = bpy.data.collections.new(collection_name)
    bpy.context.scene.collection.children.link(new_collection)
    return new_collection

# Function to clear all collections from the scene, with the option to exclude certain collections
def clear_collections(exclude_collections=None):
    if exclude_collections is None:
        exclude_collections = ["Collection"]  # Default collections to exclude
    for collection in bpy.data.collections:
        if collection.name not in exclude_collections:
            bpy.data.collections.remove(collection)

# Function to create an object (cylinder or cube) with a bevel modifier and assign a material
def create_object(collection, name, obj_type, location, scale, rotation, vertices, bevel_segments):
    # Create the object based on the specified type
    if obj_type == 'cylinder':
        bpy.ops.mesh.primitive_cylinder_add(vertices=vertices, location=location)
    elif obj_type == 'cube':
        bpy.ops.mesh.primitive_cube_add(location=location)
    
    obj = bpy.context.active_object
    obj.name = name
    obj.scale = scale
    obj.rotation_euler = [math.radians(angle) for angle in rotation]  # Convert degrees to radians

    # Add bevel modifier
    bpy.ops.object.modifier_add(type='BEVEL')
    obj.modifiers['Bevel'].segments = bevel_segments

    # Assign material if available
    material = bpy.data.materials.get(name)
    if material:
        if obj.data.materials:
            obj.data.materials[0] = material
        else:
            obj.data.materials.append(material)

    # Link the object to the specified collection and unlink from the current scene
    collection.objects.link(obj)
    bpy.context.scene.collection.objects.unlink(obj)
   
def create_vcsel(name, type, location, rotation, scale_pad, scale_aperture, scale_mesa, object_names, vertices=None, bevel_segments=1):
    collection = create_collection(name)
    create_object(collection, object_names['background'], type, location, [i*10 for i in scale_aperture], rotation, vertices, bevel_segments)
    create_object(collection, object_names['mesa_border'], type, location, scale_pad, rotation, vertices, bevel_segments)
    create_object(collection, object_names['full_oxide'], type, location, scale_aperture, rotation, vertices, bevel_segments)
    create_object(collection, object_names['aperture_2'], type, location, scale_aperture, rotation, vertices, bevel_segments)
    create_object(collection, object_names['aperture_1'], type, location, scale_mesa, rotation, vertices, bevel_segments)


object_names = ["background","mesa_border","full_oxide","aperture_2","aperture_1"]
base_output_dir = "./dataset"

for i in range(2):
    clear_collections()  # Clear existing collections
    
    vcsel_dir = base_output_dir + f"/VCSEL_{i}"
    
    with open(vcsel_dir + "/config.json") as file:
        vcsel_params = json.load(file)
    
    # Pass the object names to the create_vcsel function
    create_vcsel(object_names=object_names, **vcsel_params)

    render = bpy.context.scene.render
    render.image_settings.file_format = 'PNG'

    # Loop through the object names defined in the configuration
    for name_key in object_names:
        name_prefix = object_names[name_key]
        for obj in bpy.context.scene.objects:
            obj.hide_render = not obj.name.startswith(name_prefix)
        
        render.filepath = os.path.join(vcsel_dir, f'init_mask_{name_prefix}.png')
        bpy.ops.render.render(write_still=True)

    #clear_collections()  # Clear collections after rendering is done
